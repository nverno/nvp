#+TITLE: Notes / Todos
#+DATE: <2019-03-06 19:16:19>

* Packages with stuff I want
- smart-jump / dumb-jump
- evil: define toggle commands / window
- transient: replacement for magit-popup?
- ag / ggtags: start using again
- straight package manager is kinda close to what I want

* Functions
** General [1/10]
- [ ] awk script to parse man switches in section
- [ ] interface to install external deps
- [ ] quickhelp-toggle
- [ ] company-local => macro, check for nested backends
- [ ] list package dependencies -- `package--get-deps'
- [ ] more generic compile function?
- [ ] fix list wrapping to account for syntax
- [X] jumping from shell doesn't account for local variables
- [ ] remove all methods from generic for debugging
- [ ] [[https://github.com/abo-abo/oremacs/blob/4eec097d5f6565131121a86479a7aee69e757e90/auto.el#L616][fix column align to ignore trailing comments]]
- [ ] [[https://github.com/abo-abo/oremacs/blob/4eec097d5f6565131121a86479a7aee69e757e90/auto.el#L863][toggle word to upper]]
** evil [0/9]
things to look into
- [ ] define command
- [ ] repeat
- [ ] fold-list
- [ ] evil-make
- [ ] evil-shell-command
- [ ] evil-with-view-list
- [ ] evil-ex-sort : sort lines command
- [ ] evil-jump-to-tag
- [ ] evil-lookup-func

** Jumps [0/4]
refs: smart-jump, dumb-jump, evil-jump-to-tag
- [ ] generalized interface
- [ ] register methods for mode - do this in mode struct?
- [ ] allow multiple registered backends for each mode, like smart-jump
- [ ] fallback to grep/ag/dumb-jump or something

** Utils [1/4]
- [ ] reusable region or string utility function
- [ ] read w/ popup help: `register-read-with-preview'
- [ ] utility function to repeat command like kbdmacro-repeat
- [X] function wrappers to call local funs
*** Function cache wrappers [2/6]
- [X] basic cache wrapper
- [X] cache run once
- [ ] memoize wrappers: [[https://github.com/skeeto/emacs-memoize][memoize]]
- [ ] frame cache - see which-func
- [ ] cache w/ filenotify invalidation
- [ ] cache w/ timeout

** Logging [0/3]
- [ ] only report warnings / errors when compiling
- [ ] add option to treat all warnings as errors to makefile
- [ ] update nvp-log, not very useful. Look into shutup

** REPLs [0/1]
Not sure how this should work.
- [ ] uniform repl-swithcing interface

** Newline DWIM [2/3]
- [X] generic methods
- [X] method to match delims
- [ ] remove mode specific newline functions

** Tests [0/4] 
- [ ] generic at point
- [ ] framework to use? mode-dependent?
- [ ] unit test
- [ ] project tests

** Parsing [2/6]
see which-func
- [X] generic functions in buffer
- [X] current function name
- [ ] cache functions ala which-func
- [ ] includes in buffer
- [ ] global variables in buffer
- [ ] local variables in lexical scope

** Generic abbrevs [3/5]
- [X] Generic read
- [X] create abbrev from region
- [X] determine abbrev table name from abbrev
- [ ] create dynamic table
- [ ] make dynamic abbrevs

** Docs/help-at-point [1/3]
- [[https://github.com/abo-abo/oremacs/blob/4eec097d5f6565131121a86479a7aee69e757e90/auto.el#L556][describe hash variable]]
*** DONE Generic interface
- [X] generic interface

*** TODO Front end [0/2]
- [ ] help-at-point frontend interface
- [ ] better fitting of popup to frame

*** TODO Backends [0/9]
- [ ] company
- [ ] semantic
- [ ] man
- [ ] web search / GNU docs
- [ ] source code (using tags)
- [ ] tags
- [ ] zeal?
- [ ] javadoc - general html parsing?
- [ ] info files
- [ ] sh script parser like semantic/ia-doc for commented functions

** Completion [2/3]
- [ ] edebug -- possibly favor local variable completion?
- [[https://github.com/abo-abo/oremacs/blob/4eec097d5f6565131121a86479a7aee69e757e90/auto.el#L475][dabbrev-capf?]]
*** TODO company-bash [0/2]
- [ ] don't leave includes open
- [ ] create xrefs from imenu markers

*** TODO snippet completion [1/3]
- [ ] basic head completion => merge yas-capf
- [ ] elisp completion where appropriate
- [X] elisp-xref backend

** Dired [0/1]
- [ ] [[https://github.com/abo-abo/oremacs/blob/4eec097d5f6565131121a86479a7aee69e757e90/auto.el#L280][fix rsync]]
* Modes
** elisp [0/5]
*** TODO General [0/2]
- [ ] macroify-bindings update => elisp
- [ ] fix hippie - adds extra ')' when no match

*** TODO Align [1/5]
- [ ] align rules are shitty - dots in double quotes get moved.

*** TODO HAP [0/1]
- [ ] use company-backend
*** TODO Parsing [1/3]
Use ~load-history~
- [X] buffer functions
- [ ] buffer includes
- [ ] buffer variables
*** TODO Dynamic abbrevs [0/2]
- [ ] optionally abbrev library, buffer, or file
- [ ] another abbrev table for variables?

** C/C++ [0/9]
- [[https://github.com/abo-abo/oremacs/blob/4eec097d5f6565131121a86479a7aee69e757e90/auto.el#L79][forward sexp]]
*** TODO Font-lock [0/1]
- [ ] toggle doxygen

*** TODO Align [0/1]
- [ ] align rules for doxygen

*** TODO script [0/3]
- [ ] fixup awk script to parse system includes
- [ ] how to gather all includes needed for project?

*** TODO install [0/1]
- [ ] cleanup includes/irony install

*** TODO Project [0/1]
- [ ] use EDE?

*** TODO HAP [0/2]
- [ ] additional backend to lookup online docs? 
- [ ] man 2/3 depending on function

*** TODO Parsing [0/4]
- [ ] includes
- [ ] buffer local functions
- [ ] lexical variables

*** TODO Newline DWIM [1/3]
- [X] default in code method
- [ ] convert newline to generic
- [ ] in normal comments
- [ ] in doxygen comments

*** TODO Dynamic abbrevs [0/1]
- [ ] local functions


** Makefile [0/7]
*** TODO Align/Indent [0/7]
- [ ] fix align rule for trailing \\
- [ ] add indentation b/w declarations
*** TODO General functions [0/5]
- [ ] beginning/end-of-defun functions/marking
- [ ] fold declarations
- [ ] fold targets
*** TODO Download [0/1]
- [ ] add download source to install

*** TODO Completion [0/3]
- [ ] missing builtins, eg. warning, error, lastword
- [ ] dynamic variables
- [ ] environment variables
*** TODO macrostep [0/3]
- [ ] fixup awk script to gather local variables for macrostep
- [ ] update macrostep with additional variables + defaults
- [ ] optionally parse makefile commands?

*** TODO Parsing [0/3]
- [ ] includes
- [ ] targets
- [ ] dependencies

*** TODO Jumps [0/1]
- [ ] jump to source code for builtin functions

** M4/Autotools [2/4]
- [X] merge completion/font-lock with autoconf?
- [ ] m4 still missing lots of font-locking
- [X] update hook
- [ ] parse current function

** Awk [0/3]
*** refs
  + man.el uses to parse output
  + emacs source hooks / build-aux

*** TODO General [1/4]
- [ ] function to open src buffer from sh script
- [ ] function to choose from useful oneliners
- [ ] use awk-it??
- [X] additional font-lock: indirect calls, fields

*** TODO Generics [0/3]
- [ ] should be able to use norm beg/end/mark function from C
- [ ] function at point, other parse probably not important

*** TODO Completion [0/2]
[[https://www.gnu.org/software/gawk/manual/gawk.html#Getting-Started][manual]] : Builtin-in Variables, String functions, Arithmetic Ops, Output
Separators, 
- [ ] parse typescript for builtin sigs/docs/names
- [ ] ~FUNCTAB~, ~PROCINFO["identifiers"]~ provide dynamic completion info

** sh [0/4]
- [X] prefix hippie-shell-expand functions
- [ ] parse sh function documentation
*** TODO Completion [0/2]
- [ ] capf for lexical scoped variables
- [ ] merge capf bash-completion/variable-completion, maybe
  ~completion-merge-tables~ from minibuffer
*** TODO Snippets [0/1]
- [ ] split sh usage arguments in snippets

*** TODO Jumps [0/1]
- [ ] xref for company-bash sources, or configure tags properly

*** TODO Tests [0/1]
- [ ] method to jump to unit test at point

*** Newline [1/2]
- [X] code method
- [ ] doc comment

** Python [0/2]
- [ ] convert newline
- [ ] newline in string => parameters

** Julia [0/2]
- [ ] convert newline
- [ ] update help with new functions

** R [0/3]
- [ ] convert newline
- [ ] newline in roxygen
- [ ] update help with new layout
** Shell [0/1]
- [X] wrapping with quotes is broken
- [X] account for dir-locals when jumping from shell
*** TODO Dynamic abbrevs [0/1]
- [ ] fix
** Java [1/3]
- [ ] new root package directory w/o creating new directory
- [ ] fix newline
- [X] parse-current-function
*** TODO javadoc-mode [0/4]
- [ ] formatting for lists
- [ ] possible to determine table starts?
- [ ] better faces
- [ ] jump b/w sections, eg. Man-goto-section
*** TODO HAP [0/1]
- [ ] web-backend?? javadoc-lookup

* Mode struct [2/5]
- [X] struct or class?
- [X] package deps
- [ ] support recipe fetcher
- [ ] external install targets
- [ ] define mode-local variables?

* Automation [2/7]
- [ ] ggtags install
- [ ] hooks to compile/autoload updated packages
- [ ] better logging - only want to see warnings/errors during build
- [ ] update makefiles - remove extra stuff
- [ ] update build-scripts for init / site-lisp - refactor
- [X] gawk installs
- [X] asm install

* Mode settings [6/11]
- [ ] ggtags
- [ ] ctags
  https://github.com/skeeto/.emacs.d/tree/master/lisp
- [ ] ag settings
- [ ] pdfgrep
- [ ] EDE
- [X] m4
- [X] etags
- [X] edebug
- [X] wgrep
- [X] grep
- [X] limit greps search directories

* Library fixes [3/9]
- [ ] fix nvp-install
- [ ] better package installs
  https://raw.githubusercontent.com/skeeto/.emacs.d/master/lisp/gpkg.el
- [ ] nvp-doc - company backend, man backend, fallback to websearch? zeal?
- [ ] nvp-abbrev-dynamic - should be ready for elisp / C
- [ ] nvp-disassemble - waiting on generic docs
- [ ] only call setup functions on first load
- [X] nvp-minibuffer: eval / edebug hooks, hippie expand history
- [X] separate setup from nvp
- [X] remove nvp-conf / merge with config-tools

* Merge/remove old packages [3/11]
- [ ] bmk-to-bmk => nvp-bookmark
- [ ] esh-help => nvp-eshell
- [ ] project-templates => cookiecutter?
- [ ] project-ido => cookiecutter?
- [ ] cheatsheet-lookup => nvp-help
- [X] yas-capf => nvp-snippet
- [ ] save-utils => nvp-utils
- [X] log-utils => nvp-log
- [ ] help-utils => nvp-help
- [ ] tag-utils => nvp-tags
- [X] config-tools => nvp-conf

* Tests / Profile [2/4]
- [ ] update profiling script
- [ ] update CI
- [X] choose testing framework
- [X] add back unit tests

[[https://github.com/emacsmirror/paredit/blob/master/test.el][paredit tests]]

* Elisp Packages [0/4]
** Cookiecutter [2/3]
wrapper for cookiecutter packages
- [X] install cookiecutter
- [X] start package
- [ ] design interface
** Cargo [0/1]
- [ ] update / remove
** macrostep-sh
- [ ] bounds of things at point
- [ ] parse variables in lexical context
- [ ] include environment variables
- [ ] handle various string operations
- [ ] handle default values

* cookies [1/3]
- [X] el
- [ ] pydata
- [ ] CI

