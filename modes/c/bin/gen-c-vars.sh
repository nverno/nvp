#!/usr/bin/env bash

# Generate site-specific C variables for emacs
# - default system includes for gcc/g++/clang/clang++
# - stddef.h
# - CFLAGS for emacs source - for macroexpansion / irony

set -e

# shellcheck source=/dev/null
. ~/bin/include/log-utils.sh

# generate system include paths from gcc/g++/clang++
GCC="${GCC:-gcc}"
CPP="${CPP:-g++}"

TEST_PROG="#include <stdio.h>\n\nint main () {}"

# remnants from the past
if [ "$OS" = "Windows_NT" ]; then
    GCC="c:/msys/mingw64/bin/x86_64-w64-mingw32-gcc.exe"
    CPP="c:/msys/mingw64/bin/x86_64-w64-mingw32-g++.exe"
fi

# Arguments / Defaults
ME=$0
OUTFILE=nvp-c-include.el
SOURCE_DIRECTORY="$DEVEL/emacs"
DEFAULT_MODULES=(cairo glib-2.0 gtk+-3.0 pango atk)

USAGE="\
Generate elisp variables with C include paths and CFLAGS 

Usage: $0 [OPTION]...

  -h, --help	   print this help, then exit
  -o file          write output to FILE, default nvp-c-include.el
  -s directory     directory DIRECTORY containing emacs source
"
while (( "$#" )); do
    case "$1" in
        -h|--help) echo "$USAGE"; exit ;;
        -o) shift && OUTFILE="$1";;
        -s) shift && SOURCE_DIRECTORY="$1";;
        *) _error "$0 unknown args: ${*}";;
    esac
    shift || true
done
      
# Print system include paths for compiler to stdout
# @param        Name of compiler: gcc/g++
sys_includes () {
    local mg lang
    
    case $1 in
        --help|-h)
            exec echo -e "usage: $0 [gcc|cc|c|g++|cpp|c++]" \
                 "or location of compiler";;
        gcc|cc|c)
            mg=$GCC
            lang=c;;
        g++|cpp|c++)
            mg=$CPP
            lang=c++;;
        *) _error_exit "sys_includes: requires compiler argument"
    esac
    echo "$TEST_PROG" | "$mg" -v -x"$lang" -c - -o /dev/stdout 2>&1 |
        # remove excessive dots, print system includes
        sed -e ':1;s,/[^/.][^/]*/\.\./,/,;t 1'              \
            -n -e '/#include </, /End/{/^ /p}' |
        # trim spaces and quote paths
        sed 's/ *\(.*\) *$/"\1"/'
}

# Get system include paths for clang++
# @param        Name of compiler, c, c++ to get include paths
# @return       0 on success, 1 otherwise
clang_includes () {
    [ -z "$1" ] && _error "clang_includes requires compiler argument"
    clang++ -E -x "$1" - -v </dev/null 2>&1 |
        # remove excessive dots, print system includes
        sed -e ':1;s,/[^/.][^/]*/\.\./,/,;t 1' \
            -n -e '/#include </, /End/{/^ /p}' |
        # trim spaces and quote paths
        sed 's/ *\(.*\) *$/"\1"/'
}

# Write system includes for c/c++/clang++ to lisp variables
# @return       0 on success, 1 otherwise
write_sys_includes () {
    local lang

    # gcc
    for lang in c c++; do
        printf "\n"
        printf "(defconst nvp-%s-include-dirs\n  (list\n" "$lang"
        sys_includes "$lang" | sed 's/^/   /'
        printf "))\n"
    done
    
    # clang
    if hash clang++ 2>/dev/null; then
        for lang in c c++; do
            printf "\n"
            printf "(defconst nvp-clang-%s-include-dirs\n (list\n" "$lang"
            clang_includes "$lang" | sed 's/^/   /' | sed 's;\\;/;g'
            printf "))\n"
        done
    fi
}

# Build CPATH from module include paths using pkg-config
build_cpath() {
    local cpath mod
    for mod in "${DEFAULT_MODULES[@]}"; do
        if pkg-config --exists "$mod"; then
            cpath="$cpath $(pkg-config --cpath-only-I "$mod")"
        fi
    done
    echo "$cpath"
}

# Generate CFLAGS for emacs source, generated by configure if available.
# If not available, builds cpath from DEFAULT_MODULES
# Removes -Demacs and ${DEPFLAGS} from ${EMACS_CFLAGS}
emacs_cflags() {
    local cpath
    if [[ -d "$SOURCE_DIRECTORY" ]]; then
        cpath=$(cat <<TARGET | make -f - flags
include $SOURCE_DIRECTORY/src/Makefile
flags:
	@echo \$(subst -Demacs,,\$(subst \$(DEPFLAGS),,\$(EMACS_CFLAGS)))
TARGET
             )
    else
        cpath=$(build_cpath)
    fi
    cpath="$cpath -I$(realpath "$SOURCE_DIRECTORY/src")"
    cpath="$cpath -I$(realpath "$SOURCE_DIRECTORY/lib")"
    echo "$cpath"
}

# preprocessor symbols
stddefs() {
    find /usr/lib/gcc -name stddef.h 2>/dev/null |
        sort -r | head -n1 | tr -d '\n'
}

# Write all the variables to file
{
    printf ";;; c/c++ includes - auto-generated ($(date)) by %s\n" "$ME";
    write_sys_includes
    printf "\n(defconst nvp-c-emacs-includes \"%s\")\n" "$(emacs_cflags)"
    printf "\n(defconst nvp-c-stddef-file \"%s\")\n" "$(stddefs)"
    printf "\n(provide 'nvp-c-vars)"
} > "$OUTFILE"
