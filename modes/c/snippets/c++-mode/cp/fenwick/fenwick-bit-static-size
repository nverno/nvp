# -*- mode: snippet -*-
# name: static fenwick bit
# key: ds_bit
# --
template<typename T, int SZ> struct BIT {
    int n; T bit[SZ];
    BIT() {}
    BIT(int sz) { init(sz); }
    void init(int size) { n = size + 1; memset(bit, 0, sizeof(bit)); }
    void update(int i, T v) { for (++i; i <= n; i += i&-i) bit[i] += v; }
    T query(int i) { T res = 0; for (++i; i > 0; i -= i&-i) res += bit[i]; return res;}
    T query(int l, int r) { return query(r) - query(l - 1);}
    // first index where prefix sum >= v, or n if none greater
    int lower_bound(T v) {
        if (v <= 0) return -1;
        int k = 0;
        for (int i = 1 << 30; i != 0; i >>= 1) {
            if ((k|i) <= n && bit[k|i] < v) {
                k |= i;
                v -= bit[k];
            }
        }
        return k;
    }
};
