# -*- mode: snippet -*-
# name: eulerian cycle
# key: g_euler_cycle
# --
const int maxN = ${1:1e5};
set<int> g[maxN];

// find euler cycle in undirected graph, starting+ending at node beg
vector<int> euler_cycle(int beg, int n) {
    for (int i = 0; i < n; ++i) 
        if (g[i].size()&1)
            return {};

    stack<int> st;
    st.push(beg);
    vector<int> res;
    while (!st.empty()) {
        int u = st.top();
        if (g[u].empty()) {
            res.push_back(u);
            st.pop();
        } else {
            int v = *g[u].begin();
            g[u].erase(v);
            g[v].erase(u);
            // auto it = begin(g[v]);
            // for (; it != g[v].end() && *it != u; ++it) ;
            // g[v].erase(it);
            st.push(v);
        }
    }

    bool ok = true;
    for (int i = 0; ok && i < n; ++i) 
        ok = !g[i].size();

    if (!ok) return {};
    return res;
}
