# -*- mode: snippet -*-
# name: maximum matching
# key: g_maxmatch
# --
const int maxN = 1e5;
// left_i = {{right_i, 1}} for left_i, right_i in potential matchings
vector<pair<int,int>> adj[maxN];
vector<int> owner, visited;

int alternating_path(int left) {
    if (visited[left]) return 0;
    visited[left] = 1;
    for (auto& [right, c] : adj[left]) {
        if (owner[right] == -1 || alternating_path(owner[right])) {
            owner[right] = left;
            return 1;
        }
    }
    return 0;
}

// compute maximum matching between left (|left| = n) and right(|right| = m)
int max_matching(int n, int m) {
    int V = n + m;
    int cardinality = 0;
    owner.assign(V, -1);
    for (int left = 0; left < n; ++left) {
        visited.assign(n, 0);
        cardinality += alternating_path(left);
    }
    return cardinality;
}

// m is size of right set
vector<pair<int,int>> matches(int m) {
    vector<pair<int,int>> res;
    for (int i = 0; i < m; ++i) 
        if (owner[i] != -1)
            res.push_back({owner[i], i});
    return res;
}
