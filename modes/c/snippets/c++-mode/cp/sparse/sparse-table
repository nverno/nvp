# -*- mode: snippet -*-
# name: sparse table
# key: d_st
# --
const int maxN = ${1:2e5};
const int logN = ${1:$(ceiling (log (string-to-number (yas-text)) 2))};
int st[maxN][logN+1];
int logs[maxN+1];

auto f_sparse = static_cast<const int&(*)(const int&, const int&)>(std::${2:min});

void init(vector<int>& arr) {
    const int n = arr.size();
    for (int i = 0; i < n; ++i) st[i][0] = arr[i];

    for (int k = 1; k <= logN; ++k) {
        for (int i = 0; i + (1 << k) <= n; ++i) {
            st[i][k] = f_sparse(st[i][k-1], st[i+(1<<(k-1))][k-1]);
        }
    }

    logs[1] = 0;
    for (int i = 2; i <= maxN; ++i)
        logs[i] = logs[i/2] + 1;
}

int query(int l, int r) {
    const int len = r - l + 1;
    int k = logs[len];
    return f_sparse(st[l][k], st[r-(1<<k)+1][k]);
}