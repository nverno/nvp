# -*- mode: snippet -*-
# name: rolling hash
# key: s_rhash
# --
template<typename T>struct RollingHash {
    using ll = long long;
    static const ll mo0=1e9+21, mo1=1e9+9;
    static ll mul0, mul1;
    static const ll add0=1000010007, add1=1003333331;
    static vector<ll> pmo[2];
    T s; int S; vector<ll> h[2];
    void init(T ss) {
        this->s=ss; S=s.size();
        h[0] = h[1] = vector<ll>(1,0);
        if (!mul0)
            mul0 = 10009+(((ll)&mul0+time(NULL))>>5)%1259,
            mul1 = 10007+((time(NULL)+((ll)&mul1))>>5)%2257;
        if (pmo[0].empty()) pmo[0].push_back(1), pmo[1].push_back(1);
        for (int i = 0; i<S; ++i) h[0].push_back((h[0].back()*mul0+add0+s[i])%mo0);
        for (int i = 0; i<S; ++i) h[1].push_back((h[1].back()*mul1+add1+s[i])%mo1);
    }
    pair<ll,ll> hash(int l,int r) { // s[l..r]
        if (l>r) return {0, 0};
        while ((int)pmo[0].size()<r+2) pmo[0].push_back(pmo[0].back()*mul0%mo0),pmo[1].push_back(pmo[1].back()*mul1%mo1);
        return {(h[0][r+1]+(mo0-h[0][l]*pmo[0][r+1-l]%mo0))%mo0,
            (h[1][r+1]+(mo1-h[1][l]*pmo[1][r+1-l]%mo1))%mo1};
    }
    pair<ll,ll> hash(T ss) { init(ss); return hash(0, s.size()-1); }
    static pair<ll,ll> concat(pair<ll,ll> L, pair<ll,ll> R, int RL) { // hash(L+R) RL=len-of-R
        while (pmo[0].size()<RL+2) pmo[0].push_back(pmo[0].back()*mul0%mo0), pmo[1].push_back(pmo[1].back()*mul1%mo1);
        return {(R.first + L.first*pmo[0][RL])%mo0,(R.second + L.second*pmo[1][RL])%mo1};
    }
};
template<typename T>vector<long long> RollingHash<T>::pmo[2];
template<typename T>long long RollingHash<T>::mul0;
template<typename T>long long RollingHash<T>::mul1;