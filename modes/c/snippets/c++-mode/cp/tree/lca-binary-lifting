# -*- mode: snippet -*-
# name: lca binary lifting
# key: t_lca
# --
const int maxN = ${1:2e5};
const int logN = ${1:$(ceiling (log (string-to-number (yas-text)) 2))};
int timer = ${2:0}, up[maxN+$2][logN+1], tin[maxN+$2], tout[maxN+$2];

void dfs_lca(int u, int p${3:, vector<vector<int>>& adj}) {
    tin[u] = timer++;
    up[u][0] = p;

    for (int l = 1; l <= logN; ++l) 
        up[u][l] = up[up[u][l-1]][l-1];

    for (auto& v : ${3:$(if (yas-text) "adj" "g")}[u])
        if (v != p) 
            dfs_lca(v, u${3:$(nvp-c-yas-vars ", ")});

    tout[u] = timer++;
}

bool is_ancestor(int u, int v) {
    return tin[u] <= tin[v] && tout[u] >= tout[v];
}

int lca(int u, int v) {
    if (is_ancestor(u, v)) return u;
    if (is_ancestor(v, u)) return v;

    for (int l = logN; l >= 0; --l) {
        if (!is_ancestor(up[u][l], v))
            u = up[u][l];
    }
    return up[u][0];
}
