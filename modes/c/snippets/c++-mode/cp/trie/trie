# -*- mode: snippet -*-
# name: simple string trie
# key: d_trie
# --
struct Trie {
    bool leaf; char offset; const char *val; array<Trie*,26> ch;
    Trie(char off='a'): leaf(false), offset(off), val(nullptr) {
    fill(begin(ch), end(ch), nullptr);
    }
    void insert(string const& s) {
        Trie *ptr = this;
        for (char const &c: s) {
            if (!ptr->ch[c-offset]) ptr->ch[c-offset] = new Trie(offset);
            ptr = ptr->ch[c-offset];
        }
        ptr->leaf = true;
        ptr->val = s.c_str();
    }
    Trie *get(string const& s) {
        Trie *ptr = this;
        for (char const &c: s) {ptr = ptr->ch[c-offset]; if (!(ptr && ptr->cnt)) break;}
        return ptr;
    }
    Trie *find(string const& s) {
        Trie *ptr = get(s); return ptr && ptr->leaf ? ptr : nullptr;
    }
};
