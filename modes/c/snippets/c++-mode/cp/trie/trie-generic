# -*- mode: snippet -*-
# name: generic value trie
# key: d_gtrie
# --
template<typename T> struct Trie {
    bool leaf; char offset; int cnt; T val, ID{}; array<Trie*,26> ch;
    Trie(char off='${1:a}'): leaf(false), offset(off), cnt(0) { clear(); }
    void clear() { fill(begin(ch), end(ch), nullptr); cnt=0; leaf=false; val=ID; }
    void insert(string const& s, T v) {
        Trie *ptr = this;
        for (char const &c: s) {
            if (!ptr->ch[c-offset]) ptr->ch[c-offset] = new Trie<T>(offset);
            ptr = ptr->ch[c-offset]; ptr->cnt++;
        }
        ptr->leaf = true;
        ptr->val = v;
    }
    Trie *get(string const& s) {
        Trie *ptr = this;
        for (char const &c: s) {ptr = ptr->ch[c-offset]; if (!(ptr && ptr->cnt)) break;}
        return ptr;
    }
    int count(string const& s) { Trie *ptr=get(s); return ptr ? ptr->cnt : 0; }
    Trie *find(string const& s) {
        Trie *ptr = get(s); return ptr && ptr->leaf ? ptr : nullptr;
    }${2:
     ~Trie() \{for (auto it = ch.begin(); it != ch.end(); ++it) delete *it;\}}
};
