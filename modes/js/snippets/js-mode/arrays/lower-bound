# -*- mode: snippet -*-
# name: binary search: lower_bound
# key: lb
# --
declare global {
  interface Array<T> {
    lowerBound(cmp: any): number;
  }
}

// first index where cmp(x) is true, or if cmp not a function, 
// the index where element is not less than cmp
Array.prototype.lowerBound = function (cmp) {
  let comparator = typeof cmp !== 'function' ? (x) => x >= cmp : cmp;
  let l = 0, r = this.length;
  while (l < r) {
    let mid = (l + r) >>> 1;
    if (comparator(this[mid])) r = mid;
    else l = mid + 1;
  }
  return r;
};

function lowerBound(arr, cmp) {
  let comparator = typeof cmp !== 'function' ? (x) => x >= cmp : cmp;
  let l = 0, r = arr.length;
  while (l < r) {
    let mid = (l + r) >>> 1;
    if (comparator(arr[mid])) r = mid;
    else l = mid + 1;
  }
  return r;
}
