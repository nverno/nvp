# -*- mode: snippet -*-
# name: deepMerge objects
# key: deepMerge
# --
const deepMerge = (a, b, fn${1:, lvl = 0}) => [
  ...new Set([...Object.keys(a), ...Object.keys(b)])
].reduce((acc, key) => ({ ...acc, [key]: fn(key, a[key], b[key]${1:$($s?", lvl + 1"))} }), {});${2:
const ${3:concatFn} = (key, a, b${1:$($s? ", lvl = 0")}) => {
  if (Array.isArray(a) && Array.isArray(b)) return a.concat(b);
  if (typeof a === 'object' && typeof b === 'object') {
    return lvl > 1 ? Object.assign({\}, ...b, ...a) : deepMerge(a, b, $3${1:$($s? ", lvl + 1")});
  \}
  if (typeof a === 'string' && typeof b === 'string') return a;
  return a ?? b;
\};}
