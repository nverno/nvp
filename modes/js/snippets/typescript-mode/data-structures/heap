# -*- mode: snippet -*-
# name: Heap (default min-heap)
# key: d_heap
# --
class Heap<T> {
  private heap: T[];
  /// CMP returns > 0 if B should come before A in heap
  private cmp: (a: T, b: T) => number;
  // Default is min-heap. Max-heap: (a, b) => b - a
  constructor(comparator: (a: T, b: T) => number =
    (a, b) => a > b ? 1 : a < b ? -1 : 0) {
    this.cmp = comparator;
    this.heap = [null];
  }
  #_getLeftIndex = (i: number): number => 2 * i;
  #_getRightIndex = (i: number): number => 2 * i + 1;
  #_getParentIndex = (i: number): number => Math.floor(i / 2);
  #_swap = (i: number, j: number): void => {
    [this.heap[i], this.heap[j]] = [this.heap[j], this.heap[i]];
  };
  #_heapifyUp = () => {
    for (let i = this.size(), p = this.#_getParentIndex(i);
      p !== 0 && this.cmp(this.heap[i], this.heap[p]) < 0;
      i = p, p = this.#_getParentIndex(i)) {
      this.#_swap(p, i);
    }
  };
  #_heapifyDown = () => {
    if (this.heap.length < 3) return;
    let i = 1, l = this.#_getLeftIndex(i), r = l + 1,
      left = this.heap[l], right = this.heap[r],
      cmpl: number;
    while (left !== undefined &&
      ((cmpl = this.cmp(left, this.heap[i])) < 0) ||
      (right !== undefined && this.cmp(right, this.heap[i])) < 0
    ) {
      if (cmpl < 0 && (right === undefined || this.cmp(left, right) < 0)) {
        this.#_swap(i, l);
        i = l;
      } else {
        this.#_swap(i, r);
        i = r;
      }
      l = this.#_getLeftIndex(i);
      r = l + 1;
      left = this.heap[l];
      right = this.heap[r];
    }
  };
  size = (): number => this.heap.length - 1;
  top = () => this.size() > 0 ? this.heap[1] : null;
  isEmpty = (): boolean => this.size() <= 0;
  getData = (): T[] => this.heap.slice(1);
  push = (node: T): void => {
    this.heap.push(node);
    this.#_heapifyUp();
  };
  pop = (): T | null => {
    if (this.heap.length == 1) return null;
    if (this.heap.length == 2) return this.heap.pop();
    const top: T = this.heap[1];
    this.heap[1] = this.heap.pop();
    this.#_heapifyDown();
    return top;
  };
};