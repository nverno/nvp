# -*- mode: snippet -*-
# name: discrete sets / union find
# key: d_uf
# --
class UF {
  private par: number[];
  private sz: number[];
  private _count: number;
  constructor(n: number) {
    this.par = Array.from({length: n}, (_, i) => i);
    this.sz = Array(n).fill(1);
    this._count = n;
  }
  public find(x: number): number {
    let root = x;
    while (root !== this.par[root])
      root = this.par[root];
    while (x !== this.par[x]) {
      let tmp = this.par[x];
      this.par[x] = root;
      x = tmp;
    }
    return root;
  }
  public connected(x: number, y: number): boolean { return this.find(x) == this.find(y); }
  public merge(x: number, y: number): boolean {
    if (x < 0 || y < 0) return false;
    let xx = this.find(x), yy = this.find(y);
    if (xx == yy) return false;
    if (this.sz[xx] > this.sz[yy]) xx = [yy, yy = xx][0];
    this.par[xx] = yy;
    this.sz[yy] += this.sz[xx];
    --this._count;
    return true;
  }
  public count() { return this._count; }
}
