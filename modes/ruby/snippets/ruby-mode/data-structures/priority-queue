# -*- mode: snippet -*-
# name: priority queue
# key: d_pq
# --
# https://www.brianstorti.com/implementing-a-priority-queue-in-ruby/
class PriorityQueue
  attr_reader :elements
  
  def initialize
    @elements = [nil]
  end
  
  def <<(element)
    @elements << element
    heapify_up(@elements.size - 1)
  end

  def push(elem); self << elem end

  def pop
    swap(1, @elements.size - 1)
    max = @elements.pop
    heapify_down(1)
    max
  end

  def top
    @elements[1]
  end
  
  def size
    @elements.size - 1
  end
  alias length size 

  private
  
  def heapify_up(index)
    return if index <= 1

    parent_index = index / 2 # /
    return if @elements[parent_index] >= @elements[index]
  
    swap(index, parent_index)
    heapify_up(parent_index)
  end
  
  def heapify_down(index)
    child_index = (index * 2)

    return if child_index > @elements.size - 1

    child_index += 1 if child_index < @elements.size - 1 && @elements[child_index + 1] > @elements[child_index]

    return if @elements[index] >= @elements[child_index]

    swap(index, child_index)
    heapify_down(child_index)
  end
  
  def swap(source, target)
    @elements[source], @elements[target] = @elements[target], @elements[source]
  end
end
