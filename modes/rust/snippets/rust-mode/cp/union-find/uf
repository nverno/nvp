# -*- mode: snippet -*-
# name: union find datastructure
# key: d_uf
# --
pub struct UF {
    parent: Vec<usize>,
    sz: Vec<usize>,
}
impl UF {
    pub fn new(sz: usize) -> Self {
        Self {
            parent: (0..sz).collect(),
            sz: vec![1; sz],
        }
    }
    pub fn find(&mut self, x: usize) -> usize {
        if self.parent[x] != x {
            self.parent[x] = self.find(self.parent[x]);
        }
        self.parent[x]
    }
    pub fn connected(&mut self, x: usize, y: usize) -> bool {
        self.find(x) == self.find(y)
    }
    pub fn merge(&mut self, x: usize, y: usize) -> bool {
        let (mut xx, mut yy) = (self.find(x), self.find(y));
        if xx != yy {
            if self.sz[xx] > self.sz[yy] {
                std::mem::swap(&mut xx, &mut yy);
            }
            self.parent[xx] = yy;
            self.sz[yy] += self.sz[xx];
            true
        } else {
            false
        }
    }
}