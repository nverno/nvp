;; -*- lexical-binding: t; -*-
(define-abbrev-table 'scheme-mode-abbrev-table
  '(("d" "define" nil :system t)
    ("l" "lambda" nil :system t)
    ("w" "when" nil :system t)
    ("z" "zero?" nil :system t))
  "Scheme-Mode Abbrevs."
  :parents (list prog-mode-abbrev-table)
  :enable-function 'nvp-scheme-abbrev-fun-expand-p)

(define-abbrev-table 'guile-mode-abbrev-table
  '(;;("i" "ice-9" nil :system t)
    ("di" "display" nil :system t)
    ("ds" "define-syntax" nil :system t)
    ("sr" "syntax-rules" nil :system t)
    ("um" "use-modules" nil :system t)
    ("rl" "read-line" nil :system t)
    ("def" "define" nil :system t)
    ("defm" "define-module" nil :systemt t))
  "Guile-Mode Abbrevs."
  :parents (list scheme-mode-abbrev-table))

(define-abbrev-table 'racket-mode-variable-abbrev-table
  '(
    ("#l" "#lang racket" nil :system t)

    ("true" "#t" nil :system t)
    ("false" "#f" nil :system t))
  :regexp "\\(?:^\\|[^A-Za-z0-9_.#/-]\\)\\([A-Za-z0-9_.#/-]+\\)"
  :enable-function #'nvp-scheme-abbrev-var-expand-p)

(define-abbrev-table 'racket-mode-abbrev-table
  '(("r" "require" nil :system t)
    ("q" "quotient" nil :system t)

    ("n?" "number?" nil :system t)
    ("z?" "zero?" nil :system t)

    ("cti" "char->integer" nil :system t)
    ("dv" "define-values" nil :system t)
    ("hr" "hash-ref" nil :system t)
    ("hs" "hash-set!" nil :system t)
    ("il" "in-list" nil :system t)
    ("ir" "in-range" nil :system t)
    ("lts" "list->string" nil :system t)
    ("ltv" "list->vector" nil :system t)
    ("lr" "list-ref" nil :system t)
    ("ml" "match-let" nil :system t)
    ("mh" "make-hash" nil :system t)
    ("mp" "make-pipe" nil :system t)
    ("mv" "make-vector" nil :system t)
    ("rl" "read-line" nil :system t)
    ("rs" "read-string" nil :system t)

    ("sa" "string-append" nil :system t)
    ("sl" "string-length" nil :system t)
    ("stl" "string->list" nil :system t)
    ("sj" "string-join" nil :system t)
    ("sr" "string-ref" nil :system t)
    ("ss" "string-split" nil :system t)

    ("vl" "vector-length" nil :system t)
    ("vr" "vector-ref" nil :system t)
    ("vs" "vector-set!" nil :system t)
    ("vtl" "vector->list" nil :system t)

    ("app" "append" nil :system t)
    ("cip" "close-input-port" nil :system t)
    ("cop" "close-output-port" nil :system t)
    ("def" "define" nil :system t)
    ("err" "error" nil :system t)
    ("oif" "open-input-file" nil :system t)
    ("oof" "open-output-file" nil :system t)
    ("req" "require" nil :system t)

    ("ist" "in-stream" nil :system t)
    ("sttl" "stream->list" nil :system t)
    ("stm" "stream-map" nil :system t)
    ("stf" "stream-fold" nil :system t)

    ("isq" "in-sequences" nil :system t)
    ("sqtl" "sequence->list" nil :system t)

    ("wiff" "with-input-from-file" nil :system t)
    ("wotf" "with-output-to-file" nil :system t))
  "Racket-Mode Abbrevs."
  :parents (list racket-mode-variable-abbrev-table scheme-mode-abbrev-table)
  ;; :regexp "\\(?:[ \t\(\)\{\}\[\]]\\|^\\)\\([A-Za-z0-9_.#/*?-]+\\)\\W*"
  :enable-function #'nvp-scheme-abbrev-fun-expand-p)

(define-abbrev-table 'mit-scheme-mode-abbrev-table
  '()
  "Mit-Scheme-Mode Abbrevs."
  :parents (list scheme-mode-abbrev-table)
  :enable-function #'nvp-scheme-abbrev-fun-expand-p)

(define-abbrev-table 'geiser-repl-mode-abbrev-table
  '()
  "Geiser-Repl-Mode Abbrevs."
  :enable-function #'nvp-scheme-repl-init-abbrevs)

(define-abbrev-table 'racket-repl-mode-abbrev-table
  '()
  "Racket-Repl-Mode Abbrevs."
  :enable-function #'nvp-abbrev-expand-p
  :parents (list racket-mode-abbrev-table))
