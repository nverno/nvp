# -*- mode: snippet -*-
# name: build
# key: build
# --
# shellcheck source=/dev/null
`($set (replace-regexp-in-string "-" "_" (nvp-yas-bfn-no-ext)))`
set -eo pipefail

_${1:$(upcase yas-text)}_DIR="\$( cd "\$( dirname "\${BASH_SOURCE[0]}" )" && pwd)"
. "\$_${1:$(upcase yas-text)}_DIR/../vars.sh"
${1:$(upcase yas-text)}_GIT_REPO=$2
${1:$(upcase yas-text)}_GLOB="linux-$(uname -m).tar.gz$"

${1:`$tmp`}_current() {
    ${1:$(downcase yas-text)} --version 2>/dev/null | awk 'NR==1{match(\$0,/([0-9.]+)/,g);print g[1]}' || return 1
    return 0
}
$1_latest() {
    github_latest_release "\$${1:$(upcase yas-text)}_GIT_REPO" "\$${1:$(upcase yas-text)}_GLOB"
}
$0
$1_install() {
    local action="\$1" && shift
    _info "==> running $action \$*"
    if [ "\$action" == "--version" ]; then
        _process_version -c ${1:$(yas-text)}_current -l ${1:$(yas-text)}_latest "$@"
        return $?
    fi
    case "\$action" in
        --install)
            ! "\$($1_current \"\$@\")" 2>/dev/null && $1_install_latest "\$@" || _info "already installed"
        ;;
        --update)
            local current latest
            latest="\$($1_latest \"\$@\")" || _error "failed to find latest version"
            if ! current="\$($1_current \"\$@\")" || [[ "$current" != "$latest" ]]; then
                $1_install_latest "\$@"
            else
                _info "already have latest version: \$latest"
            fi
        ;;
        --uninstall)
        ;;
    esac
    _success "$1 \$action"
}

_process_args $1_install "\$@"